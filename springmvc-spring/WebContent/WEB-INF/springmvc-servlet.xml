<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">


	<!--
		需要进行Spring整合SpringMVC吗?
		还是否需要加入Spring的IOC容器？
		是否需要在web.xml文件中配置启动Spring IOC容器的ContextLoaderListener?
		
		1.需要：通常情况下，类似于数据源，事务，整合其他框架都是放在Spring的配置文件中（而不是放在SpringMVC的配置文件中）。
		实际上放入Spring配置文件对应的IOC容器中的还有Service和Dao。
		2.不需要：	都放在SpringMVC的配置文件中，也可以分多个Spring配置文件，然后使用import节点导入其他的配置文件
	  -->
	  
	<!-- 
		问题：若Spring的IOC容器和SpringMVC的IOC容器扫描的包有重合部分，就会导致有的bean会被创建2次。
		解决：
		1.使Spring的IOC容器扫描的包和SpringMVC的IOC容器扫描的包没有重合的部。
		2.使用context:include-filter 和  context:exclude-filter子节点来规定只能扫描的注解
	 -->  
	  

	<!-- 配置自定义扫描的包  -->
	<context:component-scan base-package="com.yws" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<!-- 配置视图解析器：如何把handler方法返回值解析为实际的物理视图 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	
	<!-- 在实际开发中通常都需要配置mvc:annotation-driven标签 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	
	<!-- 
		default-servlet-handler将在SpringMVC上下文定义一个DefaultServletHttpRequestHandler，
		它会对进入DispatcherServlet的请求进行筛查，如果是发现没有经过映射的请求，就将该请求交由Web应用服务器默认的Servlet处理。
		如果不是静态资源的请求，才由DispatcherServlet继续处理
		
		一般WEB应用服务器默认的Servlet的名称都是default。
		若所使用的WEB应用服务器的默认Servlet名称不是default，则需要通过default-servlet-name 属性显示指定
	 -->	
	<mvc:default-servlet-handler />

</beans>
